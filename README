set nocompatible
set shell=/bin/sh
set t_Co=256

filetype on
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

Bundle 'gmarik/vundle'
if executable('ag')
    Bundle 'mileszs/ack.vim'
    let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
elseif executable('ack-grep')
    let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    Bundle 'mileszs/ack.vim'
elseif executable('ack')
    Bundle 'mileszs/ack.vim'
endif
Bundle 'altercation/vim-colors-solarized'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'kien/ctrlp.vim'

Bundle 'Lokaltog/vim-easymotion'
Bundle 'mbbill/undotree'
Bundle 'vim-scripts/sessionman.vim'

Bundle 'tpope/vim-fugitive'

Bundle 'godlygeek/tabular'
if executable('ctags')
    Bundle 'majutsushi/tagbar'
endif

Bundle 'drmingdrmer/xptemplate'
Bundle 'mattn/emmet-vim'
Bundle 'vim-scripts/javacomplete'
Bundle 'elzr/vim-json'

filetype plugin indent on

set helplang=cn
set background=dark

set timeoutlen=500
set clipboard+=unnamed
set lazyredraw
set visualbell
syntax on
set mouse=a
set mousehide
scriptencoding utf-8

autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
" Always switch to the current file directory

set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore             " Allow for cursor beyond last character
set history=200                    " Store a ton of history (default is 20)
set hidden                          " Allow buffer switching without saving
set backup
set undofile                " So is persistent undo ...
set undolevels=1000         " Maximum number of changes that can be undone
set undoreload=10000        " Maximum number lines to save for undo on a buffer reload

if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
    let g:solarized_termcolors=256
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    color solarized             " Load a colorscheme
endif

set showmode
set nocursorline

" Syntax coloring lines that are too long just slows down the world
set synmaxcol=2048
"
set showcmd

set laststatus=2

set stl=%<
set stl+=\ #%n   "buffer number
set stl+=\ %f                     " Filename
set stl+=\ %w%h%m%r                 " Options
set stl+=\ %{getcwd()}          " Current dir
set stl+=\ %{fugitive#statusline()} " Git Hotness
set stl+=%=%-14.(%l/%L,%v%)\ %p%%  " Right aligned file nav info
set stl+=\ [%{&ff}/%Y]            " Filetype

set backspace=indent,eol,start
set linespace=0                 " No extra spaces between rows
set number
set incsearch
set hlsearch
set winminheight=0
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab>, list, then longest common part, then all.
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
set wildignore+=*.o,*.class,*.git,*.svn

set nowrap                      " Do not wrap long lines
set autoindent
set shiftwidth=4
set expandtab
set tabstop=4
set softtabstop=4

set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

autocmd FileType c,cpp,java,go,php,javascript autocmd BufWritePre <buffer> call StripTrailingWhitespace()
autocmd FileType python,twig,xml,yml,vim autocmd BufWritePre <buffer> call StripTrailingWhitespace()

let mapleader = ','

" fullscreen mode for GVIM and Terminal, need 'wmctrl' in you PATH
nnoremap <silent> <F11> :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>

nnoremap <C-J> <C-W>j<C-W>_
nnoremap <C-K> <C-W>k<C-W>_
nnoremap <C-H> <C-W>h<C-W>_
nnoremap <C-L> <C-W>l<C-W>_
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-B> <Left>
nnoremap <S-H> gT
nnoremap <S-L> gt
nnoremap zl zL
nnoremap zh zH

noremap! kl <esc>

nnoremap <silent> <leader>bc :BundleClean!<CR>
nnoremap <silent> <leader>bl :BundleList<CR>
nnoremap <silent> <leader>bi :BundleInstall<CR>
nnoremap <silent> <leader>bu :BundleInstall!<CR>

cnoremap %% <C-R>=expand('%:p:h').'/'<cr>
nnoremap <silent> <leader>cd :lcd %:h<CR>
nnoremap <leader>ee :e <C-R>=expand('%:p:h').'/'<cr>
nnoremap <leader>es :sp <C-R>=expand('%:p:h').'/'<cr>
nnoremap <leader>ev :vsp <C-R>=expand('%:p:h').'/'<cr>
nnoremap <leader>et :tabe <C-R>=expand('%:p:h').'/'<cr>

" Code folding options
nnoremap <leader>f0 :set foldlevel=0<CR>
nnoremap <leader>f1 :set foldlevel=1<CR>
nnoremap <leader>f2 :set foldlevel=2<CR>
nnoremap <leader>f3 :set foldlevel=3<CR>
nnoremap <leader>f4 :set foldlevel=4<CR>
nnoremap <leader>f5 :set foldlevel=5<CR>
" Find merge conflict markers
nnoremap <leader>fc /\v^[<\|=>]( .*\|$)<CR>

inoremap <leader>fn <C-R>=expand('%:t:r')<CR>

nnoremap <silent> <leader>/ :nohlsearch<CR>

nnoremap <silent> <leader>mk :!mkdir -p %:p:h<CR>
nnoremap <silent> <leader>mm :e $MYVIMRC<CR>
nnoremap <silent> <leader>ms :so $MYVIMRC<CR>

cnoremap w!! w !sudo tee % >/dev/null
inoremap ,uu <C-r>=substitute(system("uuidgen"), '.$', '', 'g')<CR>

" Plugins {
let g:xptemplate_brace_complete = ''
set runtimepath+=~/.vim/xpt-personal

" OmniComplete {
" Automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menu,preview,longest
" }

" Ctags {
set tags=./tags;/,~/.vimtags

" Make tags placed in .git/tags file available in all levels of a repository
let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
if gitroot != ''
    let &tags = &tags . ',' . gitroot . '/.git/tags'
endif
" }

" Tabularize {
nnoremap <Leader>a& :Tabularize /&<CR>
vnoremap <Leader>a& :Tabularize /&<CR>
nnoremap <Leader>a= :Tabularize /=<CR>
vnoremap <Leader>a= :Tabularize /=<CR>
nnoremap <Leader>a: :Tabularize /:<CR>
vnoremap <Leader>a: :Tabularize /:<CR>
nnoremap <Leader>a:: :Tabularize /:\zs<CR>
vnoremap <Leader>a:: :Tabularize /:\zs<CR>
nnoremap <Leader>a, :Tabularize /,<CR>
vnoremap <Leader>a, :Tabularize /,<CR>
nnoremap <Leader>a,, :Tabularize /,\zs<CR>
vnoremap <Leader>a,, :Tabularize /,\zs<CR>
nnoremap <Leader>a<Bar> :Tabularize /<Bar><CR>
vnoremap <Leader>a<Bar> :Tabularize /<Bar><CR>
" }

" Session List {
set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
nnoremap <leader>sl :SessionList<CR>
nnoremap <leader>ss :SessionSave<CR>
nnoremap <leader>sc :SessionClose<CR>
" }

" ctrlp {

let g:ctrlp_user_command = {
            \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
            \ },
            \ 'fallback': 'find %s -type f'
            \ }

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn|rvm|npm)$',
            \ 'file': '\v\.(exe|so|dll)$',
            \ }

nnoremap <leader>fr :CtrlPMRU<cr>
nnoremap <leader>fb :CtrlPBuffer<cr>
nnoremap <leader>ff :CtrlPCurFile<cr>
nnoremap <leader>fp :CtrlP<cr>
nnoremap <leader>fm :CtrlPMixed<cr>
"}

" TagBar {
nnoremap <silent> <leader>tt :TagbarToggle<CR>
"}

" Fugitive {
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
"}

" snippet {

inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" }

" UndoTree {
nnoremap <Leader>ud :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
" }

" javacomplete {

autocmd Filetype java setlocal omnifunc=javacomplete#Complete
autocmd Filetype java setlocal completefunc=javacomplete#CompleteParamsInfo

inoremap <buffer> <C-X><C-U> <C-X><C-U><C-P>

autocmd Filetype java inoremap <silent> <buffer> .  .<C-X><C-O><C-P>
" }

" }


" Functions {

" Initialize directories {
function! InitializeDirectories()

    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'undo': 'undodir',
                \ 'swap': 'directory' }

    for [dirname, settingname] in items(dir_list)
        let directory = $HOME . '/.vim' . dirname . '/'

        if !isdirectory(directory)
            call mkdir(directory)
        endif

        if isdirectory(directory)
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        else
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        endif
    endfor
endfunction
call InitializeDirectories()
" }

" Strip whitespace {
function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
" }
if !exists('g:bufferJumpList')
    let g:bufferJumpList = {}
endif

function! MarkBufferInJumpList(bufstr, letter)
    let g:bufferJumpList[a:letter] = a:bufstr
endfunction

function! JumpToBufferInJumpList(letter)
    if has_key(g:bufferJumpList, a:letter)
        exe ":buffer " . g:bufferJumpList[a:letter]
    else
        echoerr a:letter . " isn't mapped to any existing buffer"
    endif
endfunction

function! ListJumpToBuffers()
    for key in keys(g:bufferJumpList)
        echo key . " = " . g:bufferJumpList[key]
    endfor
endfunction

function! IndentToNextBraceInLineAbove()
    :normal 0wk
    :normal "vyf(
    let @v = substitute(@v, '.', ' ', 'g')
    :normal j"vPl
endfunction

nnoremap <silent> <leader>ii :call IndentToNextBraceInLineAbove()<cr>

nnoremap <silent> <leader>ma :call MarkBufferInJumpList(expand('%:p'), 'a')<cr>
nnoremap <silent> <leader>mb :call MarkBufferInJumpList(expand('%:p'), 'b')<cr>
nnoremap <silent> <leader>mc :call MarkBufferInJumpList(expand('%:p'), 'c')<cr>
nnoremap <silent> <leader>md :call MarkBufferInJumpList(expand('%:p'), 'd')<cr>
nnoremap <silent> <leader>me :call MarkBufferInJumpList(expand('%:p'), 'e')<cr>
nnoremap <silent> <leader>mf :call MarkBufferInJumpList(expand('%:p'), 'f')<cr>
nnoremap <silent> <leader>mg :call MarkBufferInJumpList(expand('%:p'), 'g')<cr>
nnoremap <silent> <leader>ja :call JumpToBufferInJumpList('a')<cr>
nnoremap <silent> <leader>jb :call JumpToBufferInJumpList('b')<cr>
nnoremap <silent> <leader>jc :call JumpToBufferInJumpList('c')<cr>
nnoremap <silent> <leader>jd :call JumpToBufferInJumpList('d')<cr>
nnoremap <silent> <leader>je :call JumpToBufferInJumpList('e')<cr>
nnoremap <silent> <leader>jf :call JumpToBufferInJumpList('f')<cr>
nnoremap <silent> <leader>jg :call JumpToBufferInJumpList('g')<cr>
nnoremap <silent> <leader>jl :call ListJumpToBuffers()<cr>
" }
